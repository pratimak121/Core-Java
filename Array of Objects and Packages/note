1. General form of a class
class Student
{
private int rollNumber;  //type instance-variable1
private String name;     //type instance-variable2
Student()    //Constructor
{
 rollNumber = 0;    
 name = null ;
}
Student(int rollNumber, String name) //parameterised constructor
{
 this.rollNumber = rollNumber;
this.name = name;
}
void display()  //type methodname(parameter-list)
{
System.out.println("Rollnumber ="+ rollNumber);
System.out.println("Name="+name);
}
}

2.Creating objects
Synatx :
ClassName referenceName;
referenceName = new ClassName();
OR
ClassName referenceName = new ClassName();
Example:
Student s1 = new Student();
Student s2 = new Student(10,"ABC");

3.Constructor :
Constructor is used to initialize the instance variables.
It is called at the creation of new object

Types of Constructors
1.Default Constructor
2.Parameterised Constructor

Example :
Student s1 = new Student();
Student s2 = new Students(100,"XYZ");

4. Overriding to String method of the Object class: 
 The toString method gives a string representation of an object. To over-ride the 
toString method for a user defined class.
Example :
class Student
{
  private int rollNumber;
private String name;
public String toString()
{
  return "RollNumber= " +rollNumber+"Name= "+name; //return string representation of an object
}
}
}
5. Declaring an array of references /object:
Syntax :
ClassName[] arrayName = new ClassName[size];
Example :
Student[] studentArray = new Student[10];

6. Creating an array of objects:
syntax:
for each reference in the array
{
  create an object using new
}
Example :
Student[] studentArray = new Student[10];
for(i=0;i<10;i++)
studentArray[i] = new Student();

7.Wrapper classes:
The wrapper class in Java provide the mechanism to convert primitive into object 
and object into primitive.

Method             Purpose
Byte.parseByte     Returns byte equivalent of a String
Short.parseShort   Return the short equivalent of a String
Integer.parseInt   Returns the int eqivalent of a String
Long.parseLong     Returns the long equivalent of a String
Float.parseFloat   Returns the float eqivalent of a String
Double.parseDouble Returns the double equivalent of a String

Example 1: Autoboxing (int to Integer)
Autoboxing is the automatic conversion of primitive types to their corresponding wrapper class objects.

public class WrapperExample {
    public static void main(String args[]) {
        // Converting int into Integer
        int a = 20;
        Integer i = Integer.valueOf(a); // Converting int into Integer
        Integer j = a;  // Autoboxing, compiler will write Integer.valueOf(a) internally
        
        System.out.println(a + " " + i + " " + j);
    }
}
Integer.valueOf(a) explicitly converts the int value into an Integer object.

Integer j = a; demonstrates autoboxing, where Java automatically converts the int into an Integer object.

Example 2: Unboxing (Integer to int)
Unboxing is the process of converting an object of a wrapper class to its corresponding primitive type.

public class WrapperExample2 {
    public static void main(String args[]) {
        // Converting Integer to int
        Integer a = new Integer(3);
        int i = a.intValue();  // Explicit unboxing using intValue() method
        int j = a;  // Unboxing, compiler will use a.intValue() internally
        
        System.out.println(a + " " + i + " " + j);
    }
}
a.intValue() explicitly converts the Integer object to the int primitive.

int j = a; demonstrates unboxing, where Java automatically converts the Integer object into an int.

Additional Examples Using Other Wrapper Classes:
Example 3: Converting String to Wrapper Classes

public class WrapperParseExample {
    public static void main(String args[]) {
        String str = "100";
        
        // Convert String to different primitive types using parse methods
        byte b = Byte.parseByte(str); // String to byte
        short s = Short.parseShort(str); // String to short
System.out.println(b + " " + s );
}
}

Example 4: Converting Wrapper Objects to Primitive Types
public class WrapperUnboxingExample {
    public static void main(String args[]) {
        // Wrapper objects
        Integer intObj = Integer.valueOf(100);
        Double doubleObj = Double.valueOf(20.5);
        
        // Unboxing wrapper objects to primitives
        int i = intObj;  // Unboxing to int
        double d = doubleObj;  // Unboxing to double
        
        System.out.println(i + " " + d);
    }
}

Simple I/O 
To read a String from the console, use the following code: 
Syntax : 
InputStreamReader  isr = new InputStreamReader(System.in); 
BufferedReader br  =  new BufferedReader( isr ); 
Or 
BufferedReader  br =  new  BufferedReader ( new  InputStreamReader (System.in));
Or
  Scanner scanner = new Scanner(System.in);

For this,you will have write the following statement at the beginning: 
import java.io.*; 

Packages: 
A package is a collection of related classes and interfaces. It provides a mechanism for 
compartmentalizing classes. The Java API is organized as a collection of several 
predefined packages. The java.lang package is the default package included in all java 
programs. The commonly used packages are: 

Creating a package : 
To create a user defined package, the package statement should be written in the source 
code file. This statement should be written as the first line of the program. Save the 
program in a directory of the same name as the package. 
Syntax : 
package packageName; 

Accessing a package 
To access classes from a package, use the import statement. 
Syntax : 
import packageName.*; //importsallclasses 
import packageName.className; //importsspecifiedclass 

Note that the package can have a hierarchy of subpackages. In that case, the pack age 
name should be qualified using its parentpackages. 
Example : 
project.sourcecode.java 
Here,the package named project contains one subpackage named source code which 
contains a subpackage named java. 

Access Rules : 
The access rules for member so for class are given in the table below. 
Accessible to  public  protected  private  none
Same class      Yes      Yes       Yes      Yes 
Class in         Yes      Yes       No      Yes
same package
Sub class(in      Yes      Yes       No      No
other package)    
Non sub class      Yes     No        No      No
in other package 













